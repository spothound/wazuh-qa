import argparse
import subprocess
import os

from pathlib import Path
from wazuh_testing.tools.thread_executor import ThreadExecutor

"""
Launcher script which triggers event generation and monitoring by the agent on the one hand, and monitoring by the
manager on the other. Finally, all the data is collected and stored locally, adding an average of the data obtained
for each file.

Python requirements --> pip3 install ansible pandas psutil wazuh_testing

Example of use:
    python3 launcher.py -a 172.31.70.134 -t 120 -m 5 -n 100 -f t2.m -e 50
"""


def run_command(command):
    subprocess.run(command, shell=True)


if __name__ == "__main__":
    arg_parser = argparse.ArgumentParser()

    arg_parser.add_argument('-a', metavar=('<manager_ip_address>'),
                            type=str, required=True, help='Manager IP address')
    arg_parser.add_argument('-e', metavar='<events_per_second>', type=int, required=False,
                            help='Number of events per second to be generated by each agent', default=1000)
    arg_parser.add_argument('-n', metavar=('<agents_number>', ),
                            type=int, required=False, help='Number of agents to create and run', default=1)
    arg_parser.add_argument('-p', metavar=('<protocol>'),
                            type=str, required=False, help='Communication protocol', default='TCP')
    arg_parser.add_argument('-t', metavar=('<monitoring_time>'),
                            type=int, required=True, help='Time in seconds for monitoring')
    arg_parser.add_argument('-m', metavar=('<measurement_time>'),
                            type=int, required=False, help='Time in seconds between measurement', default=10)
    arg_parser.add_argument('-f', metavar=('<family>'), type=str, required=True, help='Family string')

    script_parameters = arg_parser.parse_args()

    manager_address = script_parameters.a
    protocol = script_parameters.p
    agents_number = script_parameters.n
    monitoring_time = str(script_parameters.t)
    eps = str(script_parameters.e)
    measurement_time = str(script_parameters.m)
    family = script_parameters.f

    data_path = os.path.join(str(Path.home()), 'Desktop', 'monitoring', 'data', family)
    files_path = f"{data_path}/n{agents_number}_e{eps}"
    manager_output_csv_name = f"manager_n{agents_number}_e{eps}.csv"
    agent_output_csv_name = f"agent_n{agents_number}_e{eps}.csv"

    run_command(f"mkdir -p {files_path}")

    agent_command = f"ansible-playbook -i ansible/hosts --extra-vars 'manager_address={manager_address} " \
                      f"monitoring_time={monitoring_time} agents_number={agents_number} eps={eps} " \
                      f"data_folder={files_path} measurement_time={measurement_time} protocol={protocol} " \
                      f"output_csv_name={agent_output_csv_name}' ansible/agent.yaml"

    manager_command = f"ansible-playbook -i ansible/hosts --extra-vars 'agents_number={agents_number} " \
                      f"monitoring_time={monitoring_time} data_folder={files_path} eps={eps} " \
                      f"measurement_time={measurement_time} output_csv_name={manager_output_csv_name}' "\
                      'ansible/manager.yaml'


    manager_thread = ThreadExecutor(run_command, {'command': manager_command})
    agent_thread = ThreadExecutor(run_command, {'command': agent_command})

    agent_thread.start()
    manager_thread.start()

    agent_thread.join()
    manager_thread.join()

    # Calculate mean of manager and agent data
    average_script_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'average.py')
    plot_script_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'plot.py')

    manager_mean_command = f"python3 {average_script_path} -f {files_path}/{manager_output_csv_name} -w -o " \
                           f"manager_mean_n{agents_number}_e{eps}.txt"
    agent_mean_command = f"python3 {average_script_path} -f {files_path}/{agent_output_csv_name} -w -o " \
                         f"agent_mean_n{agents_number}_e{eps}.txt"

    run_command(manager_mean_command)
    run_command(agent_mean_command)

    # Plot manager EPS
    plot_script_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'plot.py')
    plot_file_name = f"manager_n{agents_number}_e{eps}.png"

    plot_command = f"python3 {plot_script_path} -f {files_path}/{manager_output_csv_name} -o " \
                   f"{files_path}/{plot_file_name}"

    run_command(plot_command)
