import argparse
import subprocess
import os


"""
Launcher script to create one process per agent (necessary due to thread limitations when handling many events per
second) while also launching the monitoring of the agent's resources.
"""

DEFAULT_DATA_FILE_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'agent_monitor.csv')
AGENT_MONITOR = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'agent_monitor.py')
EVENT_GENERATOR = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'event_generator.py')

if __name__ == "__main__":
    arg_parser = argparse.ArgumentParser()

    arg_parser.add_argument('-a', metavar=('<manager_ip_address>'),
                            type=str, required=True, help='Manager IP address')
    arg_parser.add_argument('-e', metavar='<events_per_second>', type=int, required=False,
                            help='Number of events per second to be generated by each agent', default=1000)
    arg_parser.add_argument('-n', metavar=('<agents_number>', ),
                            type=int, required=False, help='Number of agents to create and run', default=1)
    arg_parser.add_argument('-o', metavar=('<os>'),
                            type=str, required=False, help='Agent operating system', default='debian8')
    arg_parser.add_argument('-p', metavar=('<protocol>'),
                            type=str, required=False, help='Communication protocol', default='TCP')
    arg_parser.add_argument('-t', metavar=('<monitoring_time>'),
                            type=int, required=True, help='Time in seconds for monitoring')
    arg_parser.add_argument('--version', metavar=('<version>'),
                            type=str, required=False, help='Agent wazuh version', default='4.2.0')
    arg_parser.add_argument('-f', metavar=('<file_path>'), default=DEFAULT_DATA_FILE_PATH,
                            type=str, required=False, help='File path where save results')
    arg_parser.add_argument('-v', action='store_true', required=False, help='Verbose prints')
    arg_parser.add_argument('-m', metavar=('<measurement_time>'),
                            type=int, required=False, help='Time in seconds between measurement', default=10)

    script_parameters = arg_parser.parse_args()

    manager_address = script_parameters.a
    protocol = script_parameters.p
    agents_number = script_parameters.n
    monitoring_time = str(script_parameters.t)
    eps = str(script_parameters.e)
    agent_version = script_parameters.version
    agent_os = script_parameters.o
    measurement_time = str(script_parameters.m)
    file = script_parameters.f
    verbose = script_parameters.v

    verbose_parameter = '-v' if verbose else ''

    if verbose_parameter:
        print(f"Launching {agents_number} agents...")

    for agent in range(agents_number):
        subprocess.run(f"python3 {EVENT_GENERATOR} -a {manager_address} -e  {eps} -n 1 -o {agent_os} -p {protocol} "
                       f"-t {monitoring_time} --version {agent_version} {verbose_parameter} &", shell=True)

    subprocess.run(f"python3 {AGENT_MONITOR} -t {monitoring_time} -m {measurement_time} -f {file} "
                   f"{verbose_parameter}", shell=True)
