import argparse
import wazuh_testing.tools.agent_simulator as ag
import logging

from time import sleep

"""
Script to create a certain number of agents and have each of them generate a certain number of events per second.
"""

logger = logging.getLogger('event_generator')
logger.setLevel(logging.ERROR)
logger.addHandler(logging.StreamHandler())


def create_agents(agents_number, manager_address, protocol, agent_version, agent_os, eps):
    agents, injectors = [], []

    logging.info(f"Creating {agents_number} agents...")
    for _ in range(agents_number):
        agent = ag.Agent(manager_address, "aes", os=agent_os, version=agent_version, fim_eps=eps)
        agents.append(agent)
        sender = ag.Sender(manager_address, protocol=protocol)

        injectors.append(ag.Injector(sender, agent))

    return injectors


def start(injectors):
    logging.info(f"Running {len(injectors)} injectors...")
    for injector in injectors:
        injector.run()


def stop(injectors):
    logging.info(f"Stopping {len(injectors)} injectors...")
    for injector in injectors:
        injector.stop_receive()


if __name__ == "__main__":
    arg_parser = argparse.ArgumentParser()

    arg_parser.add_argument('-a', metavar=('<manager_ip_address>'),
                            type=str, required=True, help='Manager IP address')
    arg_parser.add_argument('-e', metavar='<events_per_second>', type=int, required=False,
                            help='Number of events per second to be generated by each agent', default=1000)
    arg_parser.add_argument('-n', metavar=('<agents_number>', ),
                            type=int, required=False, help='Number of agents to create and run', default=1)
    arg_parser.add_argument('-o', metavar=('<os>'),
                            type=str, required=False, help='Agent operating system', default='debian8')
    arg_parser.add_argument('-p', metavar=('<protocol>'),
                            type=str, required=False, help='Communication protocol', default='TCP')
    arg_parser.add_argument('-t', metavar=('<monitoring_time>'),
                            type=int, required=True, help='Time in seconds for monitoring')
    arg_parser.add_argument('--version', metavar=('<version>'),
                            type=str, required=False, help='Agent wazuh version', default='4.2.0')
    arg_parser.add_argument('-v', action='store_true', required=False, help='Verbose prints')

    script_parameters = arg_parser.parse_args()

    manager_address = script_parameters.a
    protocol = script_parameters.p
    agents_number = script_parameters.n
    monitoring_time = script_parameters.t
    eps = script_parameters.e
    agent_version = script_parameters.version
    agent_os = script_parameters.o
    verbose = script_parameters.v

    if verbose:
        logger.setLevel(logging.INFO)

    injectors = create_agents(agents_number, manager_address, protocol, agent_version, agent_os, eps)

    try:
        start(injectors)

        sleep(monitoring_time)
    finally:
        stop(injectors)
